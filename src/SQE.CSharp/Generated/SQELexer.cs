//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SQE.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SQE {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SQELexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, AND=3, OR=4, PROPERTY=5, OPERATOR=6, ESCAPEDSTRING=7, 
		NUMBER=8, WHITESPACE=9, NEWLINE=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LETTER", "DIGIT", "AND", "OR", "EQUALS", "NOTEQUALS", 
		"GREATER", "LESS", "PROPERTY", "OPERATOR", "ESCAPEDSTRING", "NUMBER", 
		"WHITESPACE", "NEWLINE"
	};


	public SQELexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SQELexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'and'", "'or'", null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "AND", "OR", "PROPERTY", "OPERATOR", "ESCAPEDSTRING", 
		"NUMBER", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SQELexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\f', 't', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x6', '\f', '=', '\n', '\f', '\r', '\f', '\xE', '\f', '>', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x45', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 'K', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', 'N', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 'U', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', 'X', '\v', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '[', '\n', '\xE', '\x3', '\xF', '\x6', '\xF', '^', '\n', 
		'\xF', '\r', '\xF', '\xE', '\xF', '_', '\x3', '\xF', '\x3', '\xF', '\x6', 
		'\xF', '\x64', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x65', '\x5', 
		'\xF', 'h', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x5', '\x11', 'o', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x4', 'L', 'V', 
		'\x2', '\x12', '\x3', '\x3', '\x5', '\x4', '\a', '\x2', '\t', '\x2', '\v', 
		'\x5', '\r', '\x6', '\xF', '\x2', '\x11', '\x2', '\x13', '\x2', '\x15', 
		'\x2', '\x17', '\a', '\x19', '\b', '\x1B', '\t', '\x1D', '\n', '\x1F', 
		'\v', '!', '\f', '\x3', '\x2', '\x4', '\x4', '\x2', '\x43', '\\', '\x63', 
		'|', '\x3', '\x2', '\x32', ';', '\x2', 'z', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '#', '\x3', '\x2', '\x2', '\x2', '\x5', '%', 
		'\x3', '\x2', '\x2', '\x2', '\a', '\'', '\x3', '\x2', '\x2', '\x2', '\t', 
		')', '\x3', '\x2', '\x2', '\x2', '\v', '+', '\x3', '\x2', '\x2', '\x2', 
		'\r', '/', '\x3', '\x2', '\x2', '\x2', '\xF', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x11', '\x34', '\x3', '\x2', '\x2', '\x2', '\x13', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x39', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x19', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1D', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', 'i', '\x3', '\x2', '\x2', '\x2', '!', 'n', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\a', '*', '\x2', '\x2', '$', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\a', '+', '\x2', '\x2', '&', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\t', '\x2', '\x2', '\x2', '(', '\b', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\t', '\x3', '\x2', '\x2', '*', 
		'\n', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x63', '\x2', '\x2', 
		',', '-', '\a', 'p', '\x2', '\x2', '-', '.', '\a', '\x66', '\x2', '\x2', 
		'.', '\f', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 'q', '\x2', 
		'\x2', '\x30', '\x31', '\a', 't', '\x2', '\x2', '\x31', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '?', '\x2', '\x2', '\x33', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '#', '\x2', 
		'\x2', '\x35', '\x36', '\a', '?', '\x2', '\x2', '\x36', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '@', '\x2', '\x2', '\x38', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '>', '\x2', '\x2', 
		':', '\x16', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', '\a', '\x4', 
		'\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x18', '\x3', '\x2', '\x2', '\x2', '@', '\x45', '\x5', '\xF', 
		'\b', '\x2', '\x41', '\x45', '\x5', '\x11', '\t', '\x2', '\x42', '\x45', 
		'\x5', '\x13', '\n', '\x2', '\x43', '\x45', '\x5', '\x15', '\v', '\x2', 
		'\x44', '@', '\x3', '\x2', '\x2', '\x2', '\x44', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'L', '\a', '$', '\x2', '\x2', 'G', 'H', '\a', '^', '\x2', '\x2', 
		'H', 'K', '\a', '$', '\x2', '\x2', 'I', 'K', '\v', '\x2', '\x2', '\x2', 
		'J', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'N', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', '[', '\a', '$', '\x2', '\x2', 
		'P', 'V', '\a', ')', '\x2', '\x2', 'Q', 'R', '\a', '^', '\x2', '\x2', 
		'R', 'U', '\a', ')', '\x2', '\x2', 'S', 'U', '\v', '\x2', '\x2', '\x2', 
		'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\a', ')', '\x2', '\x2', 
		'Z', '\x46', '\x3', '\x2', '\x2', '\x2', 'Z', 'P', '\x3', '\x2', '\x2', 
		'\x2', '[', '\x1C', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x5', '\t', 
		'\x5', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', 
		'\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', 
		'\x2', '\x2', '\x2', '`', 'g', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', 
		'\a', '\x30', '\x2', '\x2', '\x62', '\x64', '\x5', '\t', '\x5', '\x2', 
		'\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', 
		'\x61', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x1E', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\"', '\x2', 
		'\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\b', '\x10', '\x2', 
		'\x2', 'l', ' ', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\a', '\xF', '\x2', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\f', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\b', '\x11', '\x2', 
		'\x2', 's', '\"', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2', '>', '\x44', 
		'J', 'L', 'T', 'V', 'Z', '_', '\x65', 'g', 'n', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SQE
