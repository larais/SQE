//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SQE.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SQE {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SQEParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, AND=3, OR=4, OPERATOR=5, NUMBER=6, PROPERTY=7, ESCAPEDSTRING=8, 
		WHITESPACE=9, NEWLINE=10;
	public const int
		RULE_expression = 0, RULE_mainExpr = 1;
	public static readonly string[] ruleNames = {
		"expression", "mainExpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, null, null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "AND", "OR", "OPERATOR", "NUMBER", "PROPERTY", "ESCAPEDSTRING", 
		"WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SQEParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SQEParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SQEParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public MainExprContext mainExpr() {
			return GetRuleContext<MainExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SQEParser.Eof, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQEVisitor<TResult> typedVisitor = visitor as ISQEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4; mainExpr(0);
			State = 5; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainExprContext : ParserRuleContext {
		public MainExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainExpr; } }
	 
		public MainExprContext() { }
		public virtual void CopyFrom(MainExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExpContext : MainExprContext {
		public MainExprContext[] mainExpr() {
			return GetRuleContexts<MainExprContext>();
		}
		public MainExprContext mainExpr(int i) {
			return GetRuleContext<MainExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(SQEParser.AND, 0); }
		public AndExpContext(MainExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQEVisitor<TResult> typedVisitor = visitor as ISQEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareNumberExpContext : MainExprContext {
		public ITerminalNode PROPERTY() { return GetToken(SQEParser.PROPERTY, 0); }
		public ITerminalNode OPERATOR() { return GetToken(SQEParser.OPERATOR, 0); }
		public ITerminalNode NUMBER() { return GetToken(SQEParser.NUMBER, 0); }
		public CompareNumberExpContext(MainExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQEVisitor<TResult> typedVisitor = visitor as ISQEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : MainExprContext {
		public MainExprContext mainExpr() {
			return GetRuleContext<MainExprContext>(0);
		}
		public ParenthesisExpContext(MainExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQEVisitor<TResult> typedVisitor = visitor as ISQEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpContext : MainExprContext {
		public MainExprContext[] mainExpr() {
			return GetRuleContexts<MainExprContext>();
		}
		public MainExprContext mainExpr(int i) {
			return GetRuleContext<MainExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(SQEParser.OR, 0); }
		public OrExpContext(MainExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQEVisitor<TResult> typedVisitor = visitor as ISQEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareStringExpContext : MainExprContext {
		public ITerminalNode PROPERTY() { return GetToken(SQEParser.PROPERTY, 0); }
		public ITerminalNode OPERATOR() { return GetToken(SQEParser.OPERATOR, 0); }
		public ITerminalNode ESCAPEDSTRING() { return GetToken(SQEParser.ESCAPEDSTRING, 0); }
		public CompareStringExpContext(MainExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQEVisitor<TResult> typedVisitor = visitor as ISQEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainExprContext mainExpr() {
		return mainExpr(0);
	}

	private MainExprContext mainExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MainExprContext _localctx = new MainExprContext(Context, _parentState);
		MainExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_mainExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 8; Match(T__0);
				State = 9; mainExpr(0);
				State = 10; Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new CompareNumberExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12; Match(PROPERTY);
				State = 13; Match(OPERATOR);
				State = 14; Match(NUMBER);
				}
				break;
			case 3:
				{
				_localctx = new CompareStringExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15; Match(PROPERTY);
				State = 16; Match(OPERATOR);
				State = 17; Match(ESCAPEDSTRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 28;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 26;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new AndExpContext(new MainExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mainExpr);
						State = 20;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 21; Match(AND);
						State = 22; mainExpr(5);
						}
						break;
					case 2:
						{
						_localctx = new OrExpContext(new MainExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mainExpr);
						State = 23;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 24; Match(OR);
						State = 25; mainExpr(4);
						}
						break;
					}
					} 
				}
				State = 30;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return mainExpr_sempred((MainExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mainExpr_sempred(MainExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '\"', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x15', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1D', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', ' ', '\v', '\x3', '\x3', '\x3', '\x2', '\x3', 
		'\x4', '\x4', '\x2', '\x4', '\x2', '\x2', '\x2', '#', '\x2', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x14', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\a', '\x5', '\x4', '\x3', '\x2', '\a', '\b', '\a', '\x2', '\x2', '\x3', 
		'\b', '\x3', '\x3', '\x2', '\x2', '\x2', '\t', '\n', '\b', '\x3', '\x1', 
		'\x2', '\n', '\v', '\a', '\x3', '\x2', '\x2', '\v', '\f', '\x5', '\x4', 
		'\x3', '\x2', '\f', '\r', '\a', '\x4', '\x2', '\x2', '\r', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xF', '\a', '\t', '\x2', '\x2', '\xF', '\x10', 
		'\a', '\a', '\x2', '\x2', '\x10', '\x15', '\a', '\b', '\x2', '\x2', '\x11', 
		'\x12', '\a', '\t', '\x2', '\x2', '\x12', '\x13', '\a', '\a', '\x2', '\x2', 
		'\x13', '\x15', '\a', '\n', '\x2', '\x2', '\x14', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xE', '\x3', '\x2', '\x2', '\x2', '\x14', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\f', '\x6', '\x2', '\x2', '\x17', '\x18', '\a', '\x5', 
		'\x2', '\x2', '\x18', '\x1D', '\x5', '\x4', '\x3', '\a', '\x19', '\x1A', 
		'\f', '\x5', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x6', '\x2', '\x2', 
		'\x1B', '\x1D', '\x5', '\x4', '\x3', '\x6', '\x1C', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x5', '\x14', 
		'\x1C', '\x1E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SQE
