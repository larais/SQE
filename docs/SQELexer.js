// Generated from SQE.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\fs\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u00065\n\u0006\u0003\u0007\u0006\u00078\n\u0007\r\u0007",
    "\u000e\u00079\u0003\b\u0003\b\u0003\b\u0007\b?\n\b\f\b\u000e\bB\u000b",
    "\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010W",
    "\n\u0010\f\u0010\u000e\u0010Z\u000b\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0007\u0010a\n\u0010\f\u0010\u000e\u0010",
    "d\u000b\u0010\u0003\u0010\u0005\u0010g\n\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0005\u0012n\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0004Xb\u0002\u0013\u0003\u0003",
    "\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\u0002",
    "\u0013\u0002\u0015\u0002\u0017\u0002\u0019\u0002\u001b\u0002\u001d\u0002",
    "\u001f\n!\u000b#\f\u0003\u0002\u0005\u0004\u0002C\\c|\u0003\u00022;",
    "\u0005\u00022;C\\c|\u0002w\u0002\u0003\u0003\u0002\u0002\u0002\u0002",
    "\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002",
    "\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002",
    "\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002",
    "\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002",
    "#\u0003\u0002\u0002\u0002\u0003%\u0003\u0002\u0002\u0002\u0005\'\u0003",
    "\u0002\u0002\u0002\u0007)\u0003\u0002\u0002\u0002\t-\u0003\u0002\u0002",
    "\u0002\u000b4\u0003\u0002\u0002\u0002\r7\u0003\u0002\u0002\u0002\u000f",
    ";\u0003\u0002\u0002\u0002\u0011C\u0003\u0002\u0002\u0002\u0013E\u0003",
    "\u0002\u0002\u0002\u0015G\u0003\u0002\u0002\u0002\u0017I\u0003\u0002",
    "\u0002\u0002\u0019K\u0003\u0002\u0002\u0002\u001bN\u0003\u0002\u0002",
    "\u0002\u001dP\u0003\u0002\u0002\u0002\u001ff\u0003\u0002\u0002\u0002",
    "!h\u0003\u0002\u0002\u0002#m\u0003\u0002\u0002\u0002%&\u0007*\u0002",
    "\u0002&\u0004\u0003\u0002\u0002\u0002\'(\u0007+\u0002\u0002(\u0006\u0003",
    "\u0002\u0002\u0002)*\u0007c\u0002\u0002*+\u0007p\u0002\u0002+,\u0007",
    "f\u0002\u0002,\b\u0003\u0002\u0002\u0002-.\u0007q\u0002\u0002./\u0007",
    "t\u0002\u0002/\n\u0003\u0002\u0002\u000205\u0005\u0017\f\u000215\u0005",
    "\u0019\r\u000225\u0005\u001b\u000e\u000235\u0005\u001d\u000f\u00024",
    "0\u0003\u0002\u0002\u000241\u0003\u0002\u0002\u000242\u0003\u0002\u0002",
    "\u000243\u0003\u0002\u0002\u00025\f\u0003\u0002\u0002\u000268\u0005",
    "\u0013\n\u000276\u0003\u0002\u0002\u000289\u0003\u0002\u0002\u00029",
    "7\u0003\u0002\u0002\u00029:\u0003\u0002\u0002\u0002:\u000e\u0003\u0002",
    "\u0002\u0002;@\u0005\u0011\t\u0002<?\u0005\u0011\t\u0002=?\u0005\u0013",
    "\n\u0002><\u0003\u0002\u0002\u0002>=\u0003\u0002\u0002\u0002?B\u0003",
    "\u0002\u0002\u0002@>\u0003\u0002\u0002\u0002@A\u0003\u0002\u0002\u0002",
    "A\u0010\u0003\u0002\u0002\u0002B@\u0003\u0002\u0002\u0002CD\t\u0002",
    "\u0002\u0002D\u0012\u0003\u0002\u0002\u0002EF\t\u0003\u0002\u0002F\u0014",
    "\u0003\u0002\u0002\u0002GH\t\u0004\u0002\u0002H\u0016\u0003\u0002\u0002",
    "\u0002IJ\u0007?\u0002\u0002J\u0018\u0003\u0002\u0002\u0002KL\u0007#",
    "\u0002\u0002LM\u0007?\u0002\u0002M\u001a\u0003\u0002\u0002\u0002NO\u0007",
    "@\u0002\u0002O\u001c\u0003\u0002\u0002\u0002PQ\u0007>\u0002\u0002Q\u001e",
    "\u0003\u0002\u0002\u0002RX\u0007$\u0002\u0002ST\u0007^\u0002\u0002T",
    "W\u0007$\u0002\u0002UW\u000b\u0002\u0002\u0002VS\u0003\u0002\u0002\u0002",
    "VU\u0003\u0002\u0002\u0002WZ\u0003\u0002\u0002\u0002XY\u0003\u0002\u0002",
    "\u0002XV\u0003\u0002\u0002\u0002Y[\u0003\u0002\u0002\u0002ZX\u0003\u0002",
    "\u0002\u0002[g\u0007$\u0002\u0002\\b\u0007)\u0002\u0002]^\u0007^\u0002",
    "\u0002^a\u0007)\u0002\u0002_a\u000b\u0002\u0002\u0002`]\u0003\u0002",
    "\u0002\u0002`_\u0003\u0002\u0002\u0002ad\u0003\u0002\u0002\u0002bc\u0003",
    "\u0002\u0002\u0002b`\u0003\u0002\u0002\u0002ce\u0003\u0002\u0002\u0002",
    "db\u0003\u0002\u0002\u0002eg\u0007)\u0002\u0002fR\u0003\u0002\u0002",
    "\u0002f\\\u0003\u0002\u0002\u0002g \u0003\u0002\u0002\u0002hi\u0007",
    "\"\u0002\u0002ij\u0003\u0002\u0002\u0002jk\b\u0011\u0002\u0002k\"\u0003",
    "\u0002\u0002\u0002ln\u0007\u000f\u0002\u0002ml\u0003\u0002\u0002\u0002",
    "mn\u0003\u0002\u0002\u0002no\u0003\u0002\u0002\u0002op\u0007\f\u0002",
    "\u0002pq\u0003\u0002\u0002\u0002qr\b\u0012\u0002\u0002r$\u0003\u0002",
    "\u0002\u0002\r\u000249>@VX`bfm\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function SQELexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

SQELexer.prototype = Object.create(antlr4.Lexer.prototype);
SQELexer.prototype.constructor = SQELexer;

SQELexer.EOF = antlr4.Token.EOF;
SQELexer.T__0 = 1;
SQELexer.T__1 = 2;
SQELexer.AND = 3;
SQELexer.OR = 4;
SQELexer.OPERATOR = 5;
SQELexer.NUMBER = 6;
SQELexer.PROPERTY = 7;
SQELexer.ESCAPEDSTRING = 8;
SQELexer.WHITESPACE = 9;
SQELexer.NEWLINE = 10;

SQELexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

SQELexer.prototype.modeNames = [ "DEFAULT_MODE" ];

SQELexer.prototype.literalNames = [ null, "'('", "')'", "'and'", "'or'", 
                                    null, null, null, null, "' '" ];

SQELexer.prototype.symbolicNames = [ null, null, null, "AND", "OR", "OPERATOR", 
                                     "NUMBER", "PROPERTY", "ESCAPEDSTRING", 
                                     "WHITESPACE", "NEWLINE" ];

SQELexer.prototype.ruleNames = [ "T__0", "T__1", "AND", "OR", "OPERATOR", 
                                 "NUMBER", "PROPERTY", "LETTER", "DIGIT", 
                                 "LETTERNUM", "EQUALS", "NOTEQUALS", "GREATER", 
                                 "LESS", "ESCAPEDSTRING", "WHITESPACE", 
                                 "NEWLINE" ];

SQELexer.prototype.grammarFileName = "SQE.g4";



exports.SQELexer = SQELexer;

